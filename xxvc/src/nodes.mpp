export module nodes;

import std;

import types;


export
enum class ModuleStatementType {
    eFunctionDeclaration,
    eFunctionDefinition,
    eExternFunctionDeclaration,
};

export
enum class FunctionStatementType {
    eReturnStatement,
};


export
class Node {
public:
private:
};

export
class IdentifierNode : public Node {
public:
    IdentifierNode(std::string name)
        : name_(std::move(name)) {}
    auto name() const -> std::string const& {
        return name_;
    }
private:
    std::string name_;
};

export
class NumberNode : public Node {
public:
    NumberNode(f64 number)
        : value_(number) {}
    auto value() -> f64 {
        return value_;
    }
private:
    f64 value_;
};

export
class FunctionPrototypeNode : public Node {
public:
    FunctionPrototypeNode(
        std::unique_ptr<IdentifierNode> identifier,
        std::vector<std::unique_ptr<IdentifierNode>> args)
        : identifier_(std::move(identifier))
        , args_(std::move(args)) {}
    auto identifier() const -> std::unique_ptr<IdentifierNode> const& {
        return identifier_;
    }
    auto args() const -> std::vector<std::unique_ptr<IdentifierNode>> const& {
        return args_;
    }
protected:
    std::unique_ptr<IdentifierNode> identifier_;
    std::vector<std::unique_ptr<IdentifierNode>> args_;
};

export
class FunctionStatementNode : public Node {
public:
    auto type() const -> FunctionStatementType {
        return type_;
    }
protected:
    FunctionStatementNode(FunctionStatementType type)
        : type_(type) {}
    FunctionStatementType type_;
};

export
class ReturnStatementNode : public FunctionStatementNode {
public:
    ReturnStatementNode(std::unique_ptr<NumberNode> number)
        : FunctionStatementNode(FunctionStatementType::eReturnStatement)
        , number_(std::move(number)) {}
    auto number() const -> std::unique_ptr<NumberNode> const& {
        return number_;
    }
private:
    std::unique_ptr<NumberNode> number_;
};

export
class ModuleStatementNode : public Node {
public:
    auto type() const -> ModuleStatementType {
        return type_;
    }
protected:
    ModuleStatementNode(ModuleStatementType type)
        : type_(type) {}
    ModuleStatementType type_;
};

export
class FunctionDeclarationNode : public ModuleStatementNode {
public:
    FunctionDeclarationNode(
        std::unique_ptr<FunctionPrototypeNode> prototype)
        : ModuleStatementNode(ModuleStatementType::eFunctionDeclaration)
        , prototype_(std::move(prototype)) {}
    auto prototype() const -> std::unique_ptr<FunctionPrototypeNode> const& {
        return prototype_;
    }
private:
    std::unique_ptr<FunctionPrototypeNode> prototype_;
};

export
class FunctionDefinitionNode : public ModuleStatementNode {
public:
    FunctionDefinitionNode(
        std::unique_ptr<FunctionPrototypeNode> prototype,
        std::vector<std::unique_ptr<FunctionStatementNode>> body)
        : ModuleStatementNode(ModuleStatementType::eFunctionDefinition)
        , prototype_(std::move(prototype))
        , body_(std::move(body)) {}
    auto prototype() const -> std::unique_ptr<FunctionPrototypeNode> const& {
        return prototype_;
    }
    auto body() const -> std::vector<std::unique_ptr<FunctionStatementNode>> const& {
        return body_;
    }
private:
    std::unique_ptr<FunctionPrototypeNode> prototype_;
    std::vector<std::unique_ptr<FunctionStatementNode>> body_;
};

export
class ExternFunctionDeclarationNode : public ModuleStatementNode {
public:
    ExternFunctionDeclarationNode(
        std::unique_ptr<FunctionPrototypeNode> prototype)
        : ModuleStatementNode(ModuleStatementType::eExternFunctionDeclaration)
        , prototype_(std::move(prototype)) {}
    auto prototype() const -> std::unique_ptr<FunctionPrototypeNode> const& {
        return prototype_;
    }
private:
    std::unique_ptr<FunctionPrototypeNode> prototype_;
};

export
class ModuleNode : public Node {
public:
    ModuleNode(std::vector<std::unique_ptr<ModuleStatementNode>> body)
        : body_(std::move(body)) {}
    auto body() const -> std::vector<std::unique_ptr<ModuleStatementNode>> const& {
        return body_;
    }
private:
    std::vector<std::unique_ptr<ModuleStatementNode>> body_;
};

export module parser;

import std;

import types;
import tokens;
import nodes;


// xxv grammar
//
// identifier
//   ::= identifier-token
// number
//   ::= number-token
//
// function-prototype
//   ::= identifier ':' '(' ( identifier ( ',' identifier )* ','? )? ')'
//
// function-statement
//   ::= return-statement
// return-statement
//   ::= 'return' number ';'
//
// module-statement
//   ::= function-declaration
//   ::= function-definition
//   ::= extern-function-declaration
// function-declaration
//   ::= function-prototype ';'
// function-definition
//   ::= function-prototype '{' function-statement* '}' ';'
// extern-function-declaration
//   ::= 'extern' function-prototype ';'
//
// module
//   ::= module-statement*
//


export
class Parser {
public:
    Parser() {}

    auto parse(std::vector<std::unique_ptr<Token>> tokens) -> std::unique_ptr<ModuleNode> {
        tokens_ = std::move(tokens);
        currentToken_ = 0;
        auto moduleNode = parseModule();
        tokens_.clear();
        return moduleNode;
    }

private:
    auto getCurrentToken() -> Token* {
        return tokens_[currentToken_].get();
    }

    auto advanceToken() -> void {
        ++currentToken_;
    }

    // identifier
    //   ::= identifier-token
    auto parseIdentifier() -> std::unique_ptr<IdentifierNode> {
        if (getCurrentToken()->type != TokenType::eIdentifier) {
            std::println("expected identifier");
            return nullptr;
        }
        auto identifierToken = static_cast<IdentifierToken*>(getCurrentToken());
        advanceToken();
        return std::make_unique<IdentifierNode>(std::move(identifierToken->name));
    }

    // number
    //   ::= number-token
    auto parseNumber() -> std::unique_ptr<NumberNode> {
        if (getCurrentToken()->type != TokenType::eNumber) {
            std::println("expected number");
            return nullptr;
        }
        auto numberToken = static_cast<NumberToken*>(getCurrentToken());
        advanceToken();
        return std::make_unique<NumberNode>(numberToken->value);
    }

    // function-prototype
    //   ::= identifier ':' '(' ( identifier ( ',' identifier )* ','? )? ')'
    auto parseFunctionPrototype() -> std::unique_ptr<FunctionPrototypeNode> {
        auto identifierNode = parseIdentifier();
        if (!identifierNode) return nullptr;
        if (getCurrentToken()->type != TokenType::eColon) {
            std::println("expected colon");
            return nullptr;
        }
        advanceToken();
        if (getCurrentToken()->type != TokenType::eLeftRound) {
            std::println("expected left round");
            return nullptr;
        }
        advanceToken();
        std::vector<std::unique_ptr<IdentifierNode>> args;
        if (getCurrentToken()->type == TokenType::eRightRound) {
            advanceToken();
        }
        else {
            auto identifierNode = parseIdentifier();
            if (!identifierNode) return nullptr;
            while (true) {
                if (getCurrentToken()->type == TokenType::eRightRound) {
                    advanceToken();
                    break;
                }
                if (getCurrentToken()->type != TokenType::eComma) {
                    std::println("expected comma");
                    return nullptr;
                }
                advanceToken();
                if (getCurrentToken()->type == TokenType::eRightRound) {
                    advanceToken();
                    break;
                }
                auto identifierNode = parseIdentifier();
                if (!identifierNode) return nullptr;
                args.emplace_back(std::move(identifierNode));
            }
        }
        return std::make_unique<FunctionPrototypeNode>(std::move(identifierNode), std::move(args));
    }

    // function-statement
    //   ::= return-statement
    auto parseFunctionStatement() -> std::unique_ptr<FunctionStatementNode> {
        auto returnStatement = parseReturnStatement();
        if (!returnStatement) return nullptr;
        return returnStatement;
    };

    // return-statement
    //   ::= 'return' number ';'
    auto parseReturnStatement() -> std::unique_ptr<ReturnStatementNode> {
        if (getCurrentToken()->type != TokenType::eReturn) {
            std::println("expected 'return'");
            return nullptr;
        }
        advanceToken();
        auto numberNode = parseNumber();
        if (!numberNode) return nullptr;
        if (getCurrentToken()->type != TokenType::eSemicolon) {
            std::println("expected semicolon");
            return nullptr;
        }
        advanceToken();
        return std::make_unique<ReturnStatementNode>(std::move(numberNode));
    }

    // module-statement
    //   ::= function-declaration
    //   ::= function-definition
    //   ::= extern-function-declaration
    auto parseModuleStatement() -> std::unique_ptr<ModuleStatementNode> {
        // function-declaration
        //   ::= function-prototype ';'
        // function-definition
        //   ::= function-prototype '{' function-statement* '}' ';'
        // extern-function-declaration
        //   ::= 'extern' function-prototype ';'
        b8 isExtern = false;
        if (getCurrentToken()->type == TokenType::eExtern) {
            isExtern = true;
            advanceToken();
        }
        auto prototype = parseFunctionPrototype();
        if (getCurrentToken()->type == TokenType::eSemicolon) {
            advanceToken();
            if (isExtern) {
                return std::make_unique<ExternFunctionDeclarationNode>(std::move(prototype));
            }
            else {
                return std::make_unique<FunctionDeclarationNode>(std::move(prototype));
            }
        }
        if (getCurrentToken()->type != TokenType::eLeftCurly) {
            std::println("expected curly");
            return nullptr;
        }
        advanceToken();
        std::vector<std::unique_ptr<FunctionStatementNode>> body;
        while (true) {
            if (getCurrentToken()->type == TokenType::eRightCurly) {
                advanceToken();
                break;
            }
            auto statement = parseFunctionStatement();
            if (!statement) return nullptr;
            body.emplace_back(std::move(statement));
        }
        if (getCurrentToken()->type != TokenType::eSemicolon) {
            std::println("expected semicolon");
            return nullptr;
        }
        advanceToken();
        return std::make_unique<FunctionDefinitionNode>(std::move(prototype), std::move(body));
    }

    // module
    //   ::= module-statement*
    auto parseModule() -> std::unique_ptr<ModuleNode> {
        std::vector<std::unique_ptr<ModuleStatementNode>> statements;
        while (true) {
            if (getCurrentToken()->type == TokenType::eEof) {
                advanceToken();
                break;
            }
            auto statement = parseModuleStatement();
            if (!statement) return nullptr;
            statements.emplace_back(std::move(statement));
        }
        return std::make_unique<ModuleNode>(std::move(statements));
    }

private:
    std::vector<std::unique_ptr<Token>> tokens_;
    u64 currentToken_;
};

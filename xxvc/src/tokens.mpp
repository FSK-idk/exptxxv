export module tokens;

import std;

import types;


export
enum class TokenType {
    eNumber,
    eIdentifier,

    // reserved
    eExtern,
    eReturn,

    // special
    eEof,
    eUnknown,
    eColon,
    eSemicolon,
    eComma,
    eLeftRound,
    eRightRound,
    eLeftCurly,
    eRightCurly,
};

export
struct Token {
    TokenType type;
    static auto Create(TokenType type) -> std::unique_ptr<Token> {
        return std::make_unique<Token>(Token{ type });
    }
};

export
struct IdentifierToken : Token {
    std::string name;
    static auto Create(std::string name) -> std::unique_ptr<IdentifierToken> {
        return std::make_unique<IdentifierToken>(
            IdentifierToken{ { TokenType::eIdentifier }, std::move(name) });
    }
};

export
struct NumberToken : Token {
    f64 value;
    static auto Create(f64 value) -> std::unique_ptr<NumberToken> {
        return std::make_unique<NumberToken>(
            NumberToken{ { TokenType::eNumber }, value });
    }
};
